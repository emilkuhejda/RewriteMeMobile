// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RewriteMe.Domain.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class FileItem
    {
        /// <summary>
        /// Initializes a new instance of the FileItem class.
        /// </summary>
        public FileItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileItem class.
        /// </summary>
        public FileItem(System.Guid id, string name, string fileName, string language, string recognitionStateString, string totalTimeString, System.DateTime dateCreated, System.DateTime dateUpdated, int audioSourceVersion, bool isDeleted, System.DateTime? dateProcessed = default(System.DateTime?), AudioSource audioSource = default(AudioSource))
        {
            Id = id;
            Name = name;
            FileName = fileName;
            Language = language;
            RecognitionStateString = recognitionStateString;
            TotalTimeString = totalTimeString;
            DateCreated = dateCreated;
            DateProcessed = dateProcessed;
            DateUpdated = dateUpdated;
            AudioSourceVersion = audioSourceVersion;
            IsDeleted = isDeleted;
            AudioSource = audioSource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recognitionStateString")]
        public string RecognitionStateString { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalTimeString")]
        public string TotalTimeString { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateCreated")]
        public System.DateTime DateCreated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateProcessed")]
        public System.DateTime? DateProcessed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateUpdated")]
        public System.DateTime DateUpdated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "audioSourceVersion")]
        public int AudioSourceVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDeleted")]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "audioSource")]
        public AudioSource AudioSource { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (FileName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FileName");
            }
            if (Language == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Language");
            }
            if (RecognitionStateString == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecognitionStateString");
            }
            if (TotalTimeString == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalTimeString");
            }
            if (Name != null)
            {
                if (Name.Length > 150)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 150);
                }
            }
            if (FileName != null)
            {
                if (FileName.Length > 150)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FileName", 150);
                }
            }
            if (Language != null)
            {
                if (Language.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Language", 20);
                }
            }
            if (RecognitionStateString != null)
            {
                if (RecognitionStateString.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RecognitionStateString", 20);
                }
            }
            if (TotalTimeString != null)
            {
                if (TotalTimeString.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TotalTimeString", 50);
                }
            }
            if (AudioSource != null)
            {
                AudioSource.Validate();
            }
        }
    }
}
