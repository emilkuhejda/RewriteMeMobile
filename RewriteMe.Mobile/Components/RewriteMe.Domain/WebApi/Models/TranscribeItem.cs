// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RewriteMe.Domain.WebApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TranscribeItem
    {
        /// <summary>
        /// Initializes a new instance of the TranscribeItem class.
        /// </summary>
        public TranscribeItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TranscribeItem class.
        /// </summary>
        public TranscribeItem(System.Guid id, System.Guid fileItemId, IList<RecognitionAlternative> alternatives, string userTranscript, long startTimeTicks, long endTimeTicks, long totalTimeTicks, System.DateTime dateCreatedUtc, System.DateTime dateUpdatedUtc)
        {
            Id = id;
            FileItemId = fileItemId;
            Alternatives = alternatives;
            UserTranscript = userTranscript;
            StartTimeTicks = startTimeTicks;
            EndTimeTicks = endTimeTicks;
            TotalTimeTicks = totalTimeTicks;
            DateCreatedUtc = dateCreatedUtc;
            DateUpdatedUtc = dateUpdatedUtc;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileItemId")]
        public System.Guid FileItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alternatives")]
        public IList<RecognitionAlternative> Alternatives { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userTranscript")]
        public string UserTranscript { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTimeTicks")]
        public long StartTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTimeTicks")]
        public long EndTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalTimeTicks")]
        public long TotalTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateCreatedUtc")]
        public System.DateTime DateCreatedUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateUpdatedUtc")]
        public System.DateTime DateUpdatedUtc { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alternatives == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alternatives");
            }
            if (UserTranscript == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserTranscript");
            }
        }
    }
}
