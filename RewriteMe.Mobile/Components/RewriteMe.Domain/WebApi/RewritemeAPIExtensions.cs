// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RewriteMe.Domain.WebApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RewriteMeAPI.
    /// </summary>
    public static partial class RewriteMeAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactFormModel'>
            /// </param>
            public static Ok CreateContactForm(this IRewriteMeAPI operations, ContactFormModel contactFormModel = default(ContactFormModel))
            {
                return operations.CreateContactFormAsync(contactFormModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactFormModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Ok> CreateContactFormAsync(this IRewriteMeAPI operations, ContactFormModel contactFormModel = default(ContactFormModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateContactFormWithHttpMessagesAsync(contactFormModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object GetFileItems(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.GetFileItemsAsync(updatedAfter, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFileItemsAsync(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileItemsWithHttpMessagesAsync(updatedAfter, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object GetDeletedFileItemIds(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.GetDeletedFileItemIdsAsync(updatedAfter, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDeletedFileItemIdsAsync(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedFileItemIdsWithHttpMessagesAsync(updatedAfter, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDeletedFileItemsTotalTime(this IRewriteMeAPI operations)
            {
                return operations.GetDeletedFileItemsTotalTimeAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDeletedFileItemsTotalTimeAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedFileItemsTotalTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            public static object GetFileItem(this IRewriteMeAPI operations, System.Guid fileItemId)
            {
                return operations.GetFileItemAsync(fileItemId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFileItemAsync(this IRewriteMeAPI operations, System.Guid fileItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileItemWithHttpMessagesAsync(fileItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='file'>
            /// </param>
            public static object UploadFileItem(this IRewriteMeAPI operations, string name = default(string), string language = default(string), string fileName = default(string), System.Guid? applicationId = default(System.Guid?), Stream file = default(Stream))
            {
                return operations.UploadFileItemAsync(name, language, fileName, applicationId, file).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadFileItemAsync(this IRewriteMeAPI operations, string name = default(string), string language = default(string), string fileName = default(string), System.Guid? applicationId = default(System.Guid?), Stream file = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadFileItemWithHttpMessagesAsync(name, language, fileName, applicationId, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object UpdateFileItem(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), string name = default(string), string language = default(string), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.UpdateFileItemAsync(fileItemId, name, language, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateFileItemAsync(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), string name = default(string), string language = default(string), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFileItemWithHttpMessagesAsync(fileItemId, name, language, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object DeleteFileItem(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.DeleteFileItemAsync(fileItemId, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteFileItemAsync(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteFileItemWithHttpMessagesAsync(fileItemId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItems'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object DeleteAllFileItems(this IRewriteMeAPI operations, IList<DeletedFileItemModel> fileItems = default(IList<DeletedFileItemModel>), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.DeleteAllFileItemsAsync(fileItems, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItems'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAllFileItemsAsync(this IRewriteMeAPI operations, IList<DeletedFileItemModel> fileItems = default(IList<DeletedFileItemModel>), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAllFileItemsWithHttpMessagesAsync(fileItems, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object TranscribeFileItem(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), string language = default(string), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.TranscribeFileItemAsync(fileItemId, language, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TranscribeFileItemAsync(this IRewriteMeAPI operations, System.Guid? fileItemId = default(System.Guid?), string language = default(string), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TranscribeFileItemWithHttpMessagesAsync(fileItemId, language, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            public static object GetInformationMessages(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?))
            {
                return operations.GetInformationMessagesAsync(updatedAfter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInformationMessagesAsync(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInformationMessagesWithHttpMessagesAsync(updatedAfter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetLastUpdates(this IRewriteMeAPI operations)
            {
                return operations.GetLastUpdatesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLastUpdatesAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLastUpdatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speechResultId'>
            /// </param>
            /// <param name='recognizedAudioSampleId'>
            /// </param>
            /// <param name='displayText'>
            /// </param>
            public static object CreateSpeechResult(this IRewriteMeAPI operations, System.Guid speechResultId, System.Guid recognizedAudioSampleId, string displayText = default(string))
            {
                return operations.CreateSpeechResultAsync(speechResultId, recognizedAudioSampleId, displayText).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speechResultId'>
            /// </param>
            /// <param name='recognizedAudioSampleId'>
            /// </param>
            /// <param name='displayText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSpeechResultAsync(this IRewriteMeAPI operations, System.Guid speechResultId, System.Guid recognizedAudioSampleId, string displayText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSpeechResultWithHttpMessagesAsync(speechResultId, recognizedAudioSampleId, displayText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speechResultModels'>
            /// </param>
            public static object UpdateSpeechResults(this IRewriteMeAPI operations, IList<SpeechResultModel> speechResultModels = default(IList<SpeechResultModel>))
            {
                return operations.UpdateSpeechResultsAsync(speechResultModels).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='speechResultModels'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSpeechResultsAsync(this IRewriteMeAPI operations, IList<SpeechResultModel> speechResultModels = default(IList<SpeechResultModel>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSpeechResultsWithHttpMessagesAsync(speechResultModels, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRecognizedTime(this IRewriteMeAPI operations)
            {
                return operations.GetRecognizedTimeAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRecognizedTimeAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecognizedTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            public static object GetTranscribeItems(this IRewriteMeAPI operations, System.Guid fileItemId)
            {
                return operations.GetTranscribeItemsAsync(fileItemId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileItemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscribeItemsAsync(this IRewriteMeAPI operations, System.Guid fileItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscribeItemsWithHttpMessagesAsync(fileItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object GetTranscribeItemsAll(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.GetTranscribeItemsAllAsync(updatedAfter, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscribeItemsAllAsync(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscribeItemsAllWithHttpMessagesAsync(updatedAfter, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            public static object GetTranscribeAudioSource(this IRewriteMeAPI operations, System.Guid transcribeItemId)
            {
                return operations.GetTranscribeAudioSourceAsync(transcribeItemId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscribeAudioSourceAsync(this IRewriteMeAPI operations, System.Guid transcribeItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscribeAudioSourceWithHttpMessagesAsync(transcribeItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            public static ProblemDetails GetTranscribeAudioSourceStream(this IRewriteMeAPI operations, System.Guid transcribeItemId)
            {
                return operations.GetTranscribeAudioSourceStreamAsync(transcribeItemId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> GetTranscribeAudioSourceStreamAsync(this IRewriteMeAPI operations, System.Guid transcribeItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscribeAudioSourceStreamWithHttpMessagesAsync(transcribeItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='transcript'>
            /// </param>
            public static object UpdateUserTranscript(this IRewriteMeAPI operations, System.Guid transcribeItemId, System.Guid applicationId, string transcript)
            {
                return operations.UpdateUserTranscriptAsync(transcribeItemId, applicationId, transcript).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcribeItemId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='transcript'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserTranscriptAsync(this IRewriteMeAPI operations, System.Guid transcribeItemId, System.Guid applicationId, string transcript, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserTranscriptWithHttpMessagesAsync(transcribeItemId, applicationId, transcript, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateUserModel'>
            /// </param>
            public static object UpdateUser(this IRewriteMeAPI operations, UpdateUserModel updateUserModel = default(UpdateUserModel))
            {
                return operations.UpdateUserAsync(updateUserModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateUserModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync(this IRewriteMeAPI operations, UpdateUserModel updateUserModel = default(UpdateUserModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(updateUserModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationUserModel'>
            /// </param>
            public static object RegisterUser(this IRewriteMeAPI operations, RegistrationUserModel registrationUserModel = default(RegistrationUserModel))
            {
                return operations.RegisterUserAsync(registrationUserModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='registrationUserModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RegisterUserAsync(this IRewriteMeAPI operations, RegistrationUserModel registrationUserModel = default(RegistrationUserModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterUserWithHttpMessagesAsync(registrationUserModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='installationId'>
            /// </param>
            /// <param name='language'>
            /// </param>
            public static object UpdateLanguage(this IRewriteMeAPI operations, System.Guid? installationId = default(System.Guid?), int? language = default(int?))
            {
                return operations.UpdateLanguageAsync(installationId, language).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='installationId'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLanguageAsync(this IRewriteMeAPI operations, System.Guid? installationId = default(System.Guid?), int? language = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLanguageWithHttpMessagesAsync(installationId, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object GetUserSubscriptions(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.GetUserSubscriptionsAsync(updatedAfter, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updatedAfter'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserSubscriptionsAsync(this IRewriteMeAPI operations, System.DateTime? updatedAfter = default(System.DateTime?), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserSubscriptionsWithHttpMessagesAsync(updatedAfter, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingPurchase'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static object CreateUserSubscription(this IRewriteMeAPI operations, BillingPurchase billingPurchase = default(BillingPurchase), System.Guid? applicationId = default(System.Guid?))
            {
                return operations.CreateUserSubscriptionAsync(billingPurchase, applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingPurchase'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateUserSubscriptionAsync(this IRewriteMeAPI operations, BillingPurchase billingPurchase = default(BillingPurchase), System.Guid? applicationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserSubscriptionWithHttpMessagesAsync(billingPurchase, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSpeechConfiguration(this IRewriteMeAPI operations)
            {
                return operations.GetSpeechConfigurationAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSpeechConfigurationAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSpeechConfigurationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static bool? IsAlive(this IRewriteMeAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsAliveAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object RefreshToken(this IRewriteMeAPI operations)
            {
                return operations.RefreshTokenAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshTokenAsync(this IRewriteMeAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
